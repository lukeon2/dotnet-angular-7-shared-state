// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VendingApp.Infrastructure.Data;

namespace VendingApp.Infrastructure.Migrations
{
    [DbContext(typeof(VendingDbContext))]
    [Migration("20181115210158_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VendingApp.Infrastructure.Entities.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CoinsInSlot");

                    b.Property<int>("InventoryCurrencyId");

                    b.Property<string>("Language")
                        .IsRequired();

                    b.Property<int>("SelectedCurrencyId");

                    b.HasKey("Id");

                    b.HasIndex("InventoryCurrencyId");

                    b.HasIndex("SelectedCurrencyId");

                    b.ToTable("Config");
                });

            modelBuilder.Entity("VendingApp.Infrastructure.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Symbol")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("VendingApp.Infrastructure.Entities.ExchangeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseCurrencyId");

                    b.Property<decimal>("Rate");

                    b.Property<int>("TargetCurrencyId");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrencyId");

                    b.HasIndex("TargetCurrencyId");

                    b.ToTable("ExchangeRate");
                });

            modelBuilder.Entity("VendingApp.Infrastructure.Entities.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<string>("ProductNr");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("VendingApp.Infrastructure.Entities.Config", b =>
                {
                    b.HasOne("VendingApp.Infrastructure.Entities.Currency", "InventoryCurrency")
                        .WithMany()
                        .HasForeignKey("InventoryCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VendingApp.Infrastructure.Entities.Currency", "SelectedCurrency")
                        .WithMany()
                        .HasForeignKey("SelectedCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("VendingApp.Infrastructure.Entities.ExchangeRate", b =>
                {
                    b.HasOne("VendingApp.Infrastructure.Entities.Currency", "BaseCurrency")
                        .WithMany()
                        .HasForeignKey("BaseCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VendingApp.Infrastructure.Entities.Currency", "TargetCurrency")
                        .WithMany()
                        .HasForeignKey("TargetCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
